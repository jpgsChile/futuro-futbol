/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  FFPlayer,
  FFPlayerInterface,
} from "../../../contracts/ff-player.sol/FFPlayer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rolesAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "playerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "clubId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "PlayerJoinedClub",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "fullName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "nickname",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isMinor",
        type: "bool",
      },
    ],
    name: "PlayerRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountToPlayerId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "playerId",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "string",
            name: "fullName",
            type: "string",
          },
          {
            internalType: "string",
            name: "nickname",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "primaryPosition",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "secondaryPosition",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "tertiaryPosition",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "level",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isMinor",
            type: "bool",
          },
          {
            internalType: "address",
            name: "guardian",
            type: "address",
          },
          {
            internalType: "enum FFPlayer.Visibility",
            name: "visibility",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "clubId",
            type: "uint256",
          },
        ],
        internalType: "struct FFPlayer.Player",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextPlayerId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "playerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "clubId",
        type: "uint256",
      },
    ],
    name: "playerJoinClub",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "fullName",
        type: "string",
      },
      {
        internalType: "string",
        name: "nickname",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "primaryPosition",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "secondaryPosition",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "tertiaryPosition",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "isMinor",
        type: "bool",
      },
      {
        internalType: "address",
        name: "guardian",
        type: "address",
      },
      {
        internalType: "enum FFPlayer.Visibility",
        name: "visibility",
        type: "uint8",
      },
    ],
    name: "registerPlayerFF",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "roles",
    outputs: [
      {
        internalType: "contract FFRoles",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516110bb3803806110bb83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611028806100936000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631373986e1461006757806319863f351461007c578063392f5f64146100985780635665f72f146100c3578063a36cafd3146100d6578063e55ae4e8146100f6575b600080fd5b61007a610075366004610a7b565b610116565b005b61008560015481565b6040519081526020015b60405180910390f35b6000546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200161008f565b6100856100d1366004610b24565b610372565b6100856100e4366004610c13565b60036020526000908152604090205481565b610109610104366004610c35565b610820565b60405161008f9190610ccc565b600082815260026020526040902060018101546001600160a01b031633148061021657506000546040805163fc8045b160e01b815290516001600160a01b03909216916391d1485491839163fc8045b1916004808201926020929091908290030181865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190610dcf565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610de8565b806102f857506000546040805163a217fddf60e01b815290516001600160a01b03909216916391d1485491839163a217fddf916004808201926020929091908290030181865afa15801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190610dcf565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190610de8565b6103375760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064015b60405180910390fd5b600581018290556040513390839085907ffa2a48f9099430f74e36a3013795112d33a1d8e1f7a2d980ebbd42ba03d1e99f90600090a4505050565b33600090815260036020526040812054156103c45760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b604482015260640161032e565b831561054b576001600160a01b0383166104145760405162461bcd60e51b815260206004820152601160248201527011dd585c991a585b881c995c5d5a5c9959607a1b604482015260640161032e565b6000546040805163093a953d60e21b815290516001600160a01b03909216916391d148549183916324ea54f4916004808201926020929091908290030181865afa158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a9190610dcf565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0386166024820152604401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190610de8565b8061050c57506001600160a01b03831633145b61054b5760405162461bcd60e51b815260206004820152601060248201526f11dd585c991a585b881a5b9d985b1a5960821b604482015260640161032e565b60016000815461055a90610e05565b9190508190559050604051806101800160405280828152602001336001600160a01b031681526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8e018190048102820181019092528c815291810191908d908d908190840183828082843760009201919091525050509082525060ff808b166020830152898116604083015288811660608301528716608082015285151560a08201526001600160a01b03851660c082015260e00183600181111561064457610644610c94565b815260006020918201819052838152600280835260409182902084518155928401516001840180546001600160a01b0319166001600160a01b0390921691909117905590830151908201906106999082610ecd565b50606082015160038201906106ae9082610ecd565b50608082015160048201805460a085015160c086015160e0870151610100808901516101208a01516001600160a01b0316650100000000000265010000000000600160c81b03199115156401000000000291909116640100000000600160c81b031960ff94851663010000000263ff0000001996861662010000029690961663ffff00001997861690940261ffff19909816949099169390931795909517939093169290921717939093169290921791909117808255610140840151919060ff60c81b1916600160c81b83600181111561078a5761078a610c94565b021790555061016082015181600501559050508060036000336001600160a01b03166001600160a01b0316815260200190815260200160002081905550336001600160a01b0316817f28b5b6dd0259bd5a70eca13d5023fff1c52dff37f06d48acfe07a321fac53d628e8e8e8e8a604051610809959493929190610fb6565b60405180910390a39b9a5050505050505050505050565b604080516101808082018352600080835260208084018290526060848601819052808501526080840182905260a0840182905260c0840182905260e084018290526101008401829052610120840182905261014084018290526101608401829052858252600280825291859020855193840186528054845260018101546001600160a01b03169184019190915290810180549394929391928401916108c490610e42565b80601f01602080910402602001604051908101604052809291908181526020018280546108f090610e42565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b5050505050815260200160038201805461095690610e42565b80601f016020809104026020016040519081016040528092919081815260200182805461098290610e42565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b5050509183525050600482015460ff808216602084015261010082048116604084015262010000820481166060840152630100000082048116608084015264010000000082048116151560a08401526001600160a01b036501000000000083041660c084015260e090920191600160c81b909104166001811115610a5557610a55610c94565b6001811115610a6657610a66610c94565b81526020016005820154815250509050919050565b60008060408385031215610a8e57600080fd5b50508035926020909101359150565b60008083601f840112610aaf57600080fd5b50813567ffffffffffffffff811115610ac757600080fd5b602083019150836020828501011115610adf57600080fd5b9250929050565b803560ff81168114610af757600080fd5b919050565b8015158114610b0a57600080fd5b50565b80356001600160a01b0381168114610af757600080fd5b60008060008060008060008060008060006101208c8e031215610b4657600080fd5b67ffffffffffffffff808d351115610b5d57600080fd5b610b6a8e8e358f01610a9d565b909c509a5060208d0135811015610b8057600080fd5b50610b918d60208e01358e01610a9d565b9099509750610ba260408d01610ae6565b9650610bb060608d01610ae6565b9550610bbe60808d01610ae6565b9450610bcc60a08d01610ae6565b935060c08c0135610bdc81610afc565b9250610bea60e08d01610b0d565b91506101008c013560028110610bff57600080fd5b809150509295989b509295989b9093969950565b600060208284031215610c2557600080fd5b610c2e82610b0d565b9392505050565b600060208284031215610c4757600080fd5b5035919050565b6000815180845260005b81811015610c7457602081850181015186830182015201610c58565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60028110610cc857634e487b7160e01b600052602160045260246000fd5b9052565b602081528151602082015260006020830151610cf360408401826001600160a01b03169052565b506040830151610180806060850152610d106101a0850183610c4e565b91506060850151601f19858403016080860152610d2d8382610c4e565b9250506080850151610d4460a086018260ff169052565b5060a085015160ff811660c08601525060c085015160ff811660e08601525060e0850151610100610d798187018360ff169052565b8601519050610120610d8e8682018315159052565b8601519050610140610daa868201836001600160a01b03169052565b8601519050610160610dbe86820183610caa565b959095015193019290925250919050565b600060208284031215610de157600080fd5b5051919050565b600060208284031215610dfa57600080fd5b8151610c2e81610afc565b600060018201610e2557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610e5657607f821691505b602082108103610e7657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ec8576000816000526020600020601f850160051c81016020861015610ea55750805b601f850160051c820191505b81811015610ec457828155600101610eb1565b5050505b505050565b815167ffffffffffffffff811115610ee757610ee7610e2c565b610efb81610ef58454610e42565b84610e7c565b602080601f831160018114610f305760008415610f185750858301515b600019600386901b1c1916600185901b178555610ec4565b600085815260208120601f198616915b82811015610f5f57888601518255948401946001909101908401610f40565b5085821015610f7d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000610fca606083018789610f8d565b8281036020840152610fdd818688610f8d565b9150508215156040830152969550505050505056fea26469706673582212202c85bbff0c2733ac3cff413b1fbbefc4ac9792af5f04e16b45c59a485c66dfe864736f6c63430008180033";

type FFPlayerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FFPlayerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FFPlayer__factory extends ContractFactory {
  constructor(...args: FFPlayerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    rolesAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(rolesAddress, overrides || {});
  }
  override deploy(
    rolesAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(rolesAddress, overrides || {}) as Promise<
      FFPlayer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FFPlayer__factory {
    return super.connect(runner) as FFPlayer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FFPlayerInterface {
    return new Interface(_abi) as FFPlayerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FFPlayer {
    return new Contract(address, _abi, runner) as unknown as FFPlayer;
  }
}
