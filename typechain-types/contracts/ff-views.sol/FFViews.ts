/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFFClub {
  export type ClubStruct = {
    id: BigNumberish;
    leagueId: BigNumberish;
    name: string;
    fixedGoalkeeper: boolean;
    owner: AddressLike;
  };

  export type ClubStructOutput = [
    id: bigint,
    leagueId: bigint,
    name: string,
    fixedGoalkeeper: boolean,
    owner: string
  ] & {
    id: bigint;
    leagueId: bigint;
    name: string;
    fixedGoalkeeper: boolean;
    owner: string;
  };
}

export declare namespace IFFEvent {
  export type GameEventStruct = {
    id: BigNumberish;
    gameId: BigNumberish;
    clubId: BigNumberish;
    playerId: BigNumberish;
    eventType: BigNumberish;
    dataCid: string;
    timestamp: BigNumberish;
  };

  export type GameEventStructOutput = [
    id: bigint,
    gameId: bigint,
    clubId: bigint,
    playerId: bigint,
    eventType: bigint,
    dataCid: string,
    timestamp: bigint
  ] & {
    id: bigint;
    gameId: bigint;
    clubId: bigint;
    playerId: bigint;
    eventType: bigint;
    dataCid: string;
    timestamp: bigint;
  };
}

export declare namespace IFFGame {
  export type GameStruct = {
    id: BigNumberish;
    clubAId: BigNumberish;
    clubBId: BigNumberish;
    scheduledAt: BigNumberish;
    metadataCid: string;
    closed: boolean;
  };

  export type GameStructOutput = [
    id: bigint,
    clubAId: bigint,
    clubBId: bigint,
    scheduledAt: bigint,
    metadataCid: string,
    closed: boolean
  ] & {
    id: bigint;
    clubAId: bigint;
    clubBId: bigint;
    scheduledAt: bigint;
    metadataCid: string;
    closed: boolean;
  };
}

export declare namespace IFFPlayer {
  export type PlayerStruct = {
    id: BigNumberish;
    account: AddressLike;
    nickname: string;
    primaryPosition: BigNumberish;
    level: BigNumberish;
    isMinor: boolean;
    guardian: AddressLike;
    visibility: BigNumberish;
    clubId: BigNumberish;
  };

  export type PlayerStructOutput = [
    id: bigint,
    account: string,
    nickname: string,
    primaryPosition: bigint,
    level: bigint,
    isMinor: boolean,
    guardian: string,
    visibility: bigint,
    clubId: bigint
  ] & {
    id: bigint;
    account: string;
    nickname: string;
    primaryPosition: bigint;
    level: bigint;
    isMinor: boolean;
    guardian: string;
    visibility: bigint;
    clubId: bigint;
  };
}

export declare namespace IFFLeague {
  export type LeagueStruct = {
    id: BigNumberish;
    name: string;
    location: string;
    category: string;
    owner: AddressLike;
    verificationLevel: BigNumberish;
  };

  export type LeagueStructOutput = [
    id: bigint,
    name: string,
    location: string,
    category: string,
    owner: string,
    verificationLevel: bigint
  ] & {
    id: bigint;
    name: string;
    location: string;
    category: string;
    owner: string;
    verificationLevel: bigint;
  };
}

export interface FFViewsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "club"
      | "ffEvent"
      | "game"
      | "getAlineacion"
      | "getClub"
      | "getEvento"
      | "getJuego"
      | "getJugador"
      | "getLiga"
      | "league"
      | "lineup"
      | "player"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "club", values?: undefined): string;
  encodeFunctionData(functionFragment: "ffEvent", values?: undefined): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAlineacion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClub",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvento",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJuego",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJugador",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiga",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "league", values?: undefined): string;
  encodeFunctionData(functionFragment: "lineup", values?: undefined): string;
  encodeFunctionData(functionFragment: "player", values?: undefined): string;

  decodeFunctionResult(functionFragment: "club", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ffEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAlineacion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEvento", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJuego", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJugador", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLiga", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "league", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lineup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
}

export interface FFViews extends BaseContract {
  connect(runner?: ContractRunner | null): FFViews;
  waitForDeployment(): Promise<this>;

  interface: FFViewsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  club: TypedContractMethod<[], [string], "view">;

  ffEvent: TypedContractMethod<[], [string], "view">;

  game: TypedContractMethod<[], [string], "view">;

  getAlineacion: TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getClub: TypedContractMethod<
    [clubId: BigNumberish],
    [IFFClub.ClubStructOutput],
    "view"
  >;

  getEvento: TypedContractMethod<
    [eventId: BigNumberish],
    [IFFEvent.GameEventStructOutput],
    "view"
  >;

  getJuego: TypedContractMethod<
    [gameId: BigNumberish],
    [IFFGame.GameStructOutput],
    "view"
  >;

  getJugador: TypedContractMethod<
    [playerId: BigNumberish],
    [IFFPlayer.PlayerStructOutput],
    "view"
  >;

  getLiga: TypedContractMethod<
    [leagueId: BigNumberish],
    [IFFLeague.LeagueStructOutput],
    "view"
  >;

  league: TypedContractMethod<[], [string], "view">;

  lineup: TypedContractMethod<[], [string], "view">;

  player: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "club"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ffEvent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "game"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAlineacion"
  ): TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClub"
  ): TypedContractMethod<
    [clubId: BigNumberish],
    [IFFClub.ClubStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEvento"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [IFFEvent.GameEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJuego"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [IFFGame.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJugador"
  ): TypedContractMethod<
    [playerId: BigNumberish],
    [IFFPlayer.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiga"
  ): TypedContractMethod<
    [leagueId: BigNumberish],
    [IFFLeague.LeagueStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "league"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lineup"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
