/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFFEvent {
  export type GameEventStruct = {
    id: BigNumberish;
    gameId: BigNumberish;
    clubId: BigNumberish;
    playerId: BigNumberish;
    eventType: BigNumberish;
    dataCid: string;
    timestamp: BigNumberish;
  };

  export type GameEventStructOutput = [
    id: bigint,
    gameId: bigint,
    clubId: bigint,
    playerId: bigint,
    eventType: bigint,
    dataCid: string,
    timestamp: bigint
  ] & {
    id: bigint;
    gameId: bigint;
    clubId: bigint;
    playerId: bigint;
    eventType: bigint;
    dataCid: string;
    timestamp: bigint;
  };
}

export interface IFFEventInterface extends Interface {
  getFunction(
    nameOrSignature: "eventsById" | "getGameEvents"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eventsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameEvents",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "eventsById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameEvents",
    data: BytesLike
  ): Result;
}

export interface IFFEvent extends BaseContract {
  connect(runner?: ContractRunner | null): IFFEvent;
  waitForDeployment(): Promise<this>;

  interface: IFFEventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eventsById: TypedContractMethod<
    [id: BigNumberish],
    [IFFEvent.GameEventStructOutput],
    "view"
  >;

  getGameEvents: TypedContractMethod<
    [gameId: BigNumberish],
    [IFFEvent.GameEventStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eventsById"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IFFEvent.GameEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameEvents"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [IFFEvent.GameEventStructOutput[]],
    "view"
  >;

  filters: {};
}
