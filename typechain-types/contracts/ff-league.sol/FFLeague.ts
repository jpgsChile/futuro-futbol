/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FFLeague {
  export type LeagueStruct = {
    id: BigNumberish;
    name: string;
    location: string;
    category: string;
    owner: AddressLike;
    verificationLevel: BigNumberish;
  };

  export type LeagueStructOutput = [
    id: bigint,
    name: string,
    location: string,
    category: string,
    owner: string,
    verificationLevel: bigint
  ] & {
    id: bigint;
    name: string;
    location: string;
    category: string;
    owner: string;
    verificationLevel: bigint;
  };
}

export interface FFLeagueInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createLeague"
      | "getLeague"
      | "nextLeagueId"
      | "roles"
      | "setVerificationLevel"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LeagueCreated" | "LeagueVerificationLevelUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createLeague",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeague",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextLeagueId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVerificationLevel",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLeague", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextLeagueId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationLevel",
    data: BytesLike
  ): Result;
}

export namespace LeagueCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    location: string,
    category: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    location: string,
    category: string,
    owner: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    location: string;
    category: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeagueVerificationLevelUpdatedEvent {
  export type InputTuple = [id: BigNumberish, level: BigNumberish];
  export type OutputTuple = [id: bigint, level: bigint];
  export interface OutputObject {
    id: bigint;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFLeague extends BaseContract {
  connect(runner?: ContractRunner | null): FFLeague;
  waitForDeployment(): Promise<this>;

  interface: FFLeagueInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createLeague: TypedContractMethod<
    [name: string, location: string, category: string],
    [bigint],
    "nonpayable"
  >;

  getLeague: TypedContractMethod<
    [leagueId: BigNumberish],
    [FFLeague.LeagueStructOutput],
    "view"
  >;

  nextLeagueId: TypedContractMethod<[], [bigint], "view">;

  roles: TypedContractMethod<[], [string], "view">;

  setVerificationLevel: TypedContractMethod<
    [leagueId: BigNumberish, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createLeague"
  ): TypedContractMethod<
    [name: string, location: string, category: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLeague"
  ): TypedContractMethod<
    [leagueId: BigNumberish],
    [FFLeague.LeagueStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextLeagueId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setVerificationLevel"
  ): TypedContractMethod<
    [leagueId: BigNumberish, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LeagueCreated"
  ): TypedContractEvent<
    LeagueCreatedEvent.InputTuple,
    LeagueCreatedEvent.OutputTuple,
    LeagueCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LeagueVerificationLevelUpdated"
  ): TypedContractEvent<
    LeagueVerificationLevelUpdatedEvent.InputTuple,
    LeagueVerificationLevelUpdatedEvent.OutputTuple,
    LeagueVerificationLevelUpdatedEvent.OutputObject
  >;

  filters: {
    "LeagueCreated(uint256,string,string,string,address)": TypedContractEvent<
      LeagueCreatedEvent.InputTuple,
      LeagueCreatedEvent.OutputTuple,
      LeagueCreatedEvent.OutputObject
    >;
    LeagueCreated: TypedContractEvent<
      LeagueCreatedEvent.InputTuple,
      LeagueCreatedEvent.OutputTuple,
      LeagueCreatedEvent.OutputObject
    >;

    "LeagueVerificationLevelUpdated(uint256,uint8)": TypedContractEvent<
      LeagueVerificationLevelUpdatedEvent.InputTuple,
      LeagueVerificationLevelUpdatedEvent.OutputTuple,
      LeagueVerificationLevelUpdatedEvent.OutputObject
    >;
    LeagueVerificationLevelUpdated: TypedContractEvent<
      LeagueVerificationLevelUpdatedEvent.InputTuple,
      LeagueVerificationLevelUpdatedEvent.OutputTuple,
      LeagueVerificationLevelUpdatedEvent.OutputObject
    >;
  };
}
