/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FFAttestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attest"
      | "attestations"
      | "elevateVerification"
      | "nextAttestationSeq"
      | "roles"
      | "subjectVerificationLevel"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Attested" | "VerificationElevated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attest",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "elevateVerification",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAttestationSeq",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subjectVerificationLevel",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "elevateVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAttestationSeq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subjectVerificationLevel",
    data: BytesLike
  ): Result;
}

export namespace AttestedEvent {
  export type InputTuple = [
    id: BytesLike,
    subject: AddressLike,
    issuer: AddressLike,
    level: BigNumberish,
    schema: string
  ];
  export type OutputTuple = [
    id: string,
    subject: string,
    issuer: string,
    level: bigint,
    schema: string
  ];
  export interface OutputObject {
    id: string;
    subject: string;
    issuer: string;
    level: bigint;
    schema: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationElevatedEvent {
  export type InputTuple = [
    subject: AddressLike,
    newLevel: BigNumberish,
    executor: AddressLike
  ];
  export type OutputTuple = [
    subject: string,
    newLevel: bigint,
    executor: string
  ];
  export interface OutputObject {
    subject: string;
    newLevel: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFAttest extends BaseContract {
  connect(runner?: ContractRunner | null): FFAttest;
  waitForDeployment(): Promise<this>;

  interface: FFAttestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attest: TypedContractMethod<
    [subject: AddressLike, level: BigNumberish, schema: string, data: string],
    [string],
    "nonpayable"
  >;

  attestations: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string, bigint] & {
        id: string;
        subject: string;
        issuer: string;
        level: bigint;
        schema: string;
        data: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  elevateVerification: TypedContractMethod<
    [subject: AddressLike, newLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextAttestationSeq: TypedContractMethod<[], [bigint], "view">;

  roles: TypedContractMethod<[], [string], "view">;

  subjectVerificationLevel: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attest"
  ): TypedContractMethod<
    [subject: AddressLike, level: BigNumberish, schema: string, data: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestations"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string, bigint] & {
        id: string;
        subject: string;
        issuer: string;
        level: bigint;
        schema: string;
        data: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "elevateVerification"
  ): TypedContractMethod<
    [subject: AddressLike, newLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextAttestationSeq"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subjectVerificationLevel"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Attested"
  ): TypedContractEvent<
    AttestedEvent.InputTuple,
    AttestedEvent.OutputTuple,
    AttestedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationElevated"
  ): TypedContractEvent<
    VerificationElevatedEvent.InputTuple,
    VerificationElevatedEvent.OutputTuple,
    VerificationElevatedEvent.OutputObject
  >;

  filters: {
    "Attested(bytes32,address,address,uint8,string)": TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
    Attested: TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;

    "VerificationElevated(address,uint8,address)": TypedContractEvent<
      VerificationElevatedEvent.InputTuple,
      VerificationElevatedEvent.OutputTuple,
      VerificationElevatedEvent.OutputObject
    >;
    VerificationElevated: TypedContractEvent<
      VerificationElevatedEvent.InputTuple,
      VerificationElevatedEvent.OutputTuple,
      VerificationElevatedEvent.OutputObject
    >;
  };
}
