/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FFGame {
  export type GameStruct = {
    id: BigNumberish;
    clubAId: BigNumberish;
    clubBId: BigNumberish;
    scheduledAt: BigNumberish;
    metadataCid: string;
    closed: boolean;
  };

  export type GameStructOutput = [
    id: bigint,
    clubAId: bigint,
    clubBId: bigint,
    scheduledAt: bigint,
    metadataCid: string,
    closed: boolean
  ] & {
    id: bigint;
    clubAId: bigint;
    clubBId: bigint;
    scheduledAt: bigint;
    metadataCid: string;
    closed: boolean;
  };
}

export interface FFGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeGame"
      | "createGame"
      | "createGameFF"
      | "getGame"
      | "nextGameId"
      | "roles"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameClosed" | "GameCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "closeGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGameFF",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextGameId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(functionFragment: "closeGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGameFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextGameId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace GameClosedEvent {
  export type InputTuple = [id: BigNumberish, executor: AddressLike];
  export type OutputTuple = [id: bigint, executor: string];
  export interface OutputObject {
    id: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    clubAId: BigNumberish,
    clubBId: BigNumberish,
    scheduledAt: BigNumberish,
    metadataCid: string
  ];
  export type OutputTuple = [
    id: bigint,
    clubAId: bigint,
    clubBId: bigint,
    scheduledAt: bigint,
    metadataCid: string
  ];
  export interface OutputObject {
    id: bigint;
    clubAId: bigint;
    clubBId: bigint;
    scheduledAt: bigint;
    metadataCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFGame extends BaseContract {
  connect(runner?: ContractRunner | null): FFGame;
  waitForDeployment(): Promise<this>;

  interface: FFGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeGame: TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  createGame: TypedContractMethod<
    [clubAId: BigNumberish, clubBId: BigNumberish, scheduledAt: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createGameFF: TypedContractMethod<
    [
      clubAId: BigNumberish,
      clubBId: BigNumberish,
      scheduledAt: BigNumberish,
      metadataCid: string
    ],
    [bigint],
    "nonpayable"
  >;

  getGame: TypedContractMethod<
    [gameId: BigNumberish],
    [FFGame.GameStructOutput],
    "view"
  >;

  nextGameId: TypedContractMethod<[], [bigint], "view">;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeGame"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [clubAId: BigNumberish, clubBId: BigNumberish, scheduledAt: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGameFF"
  ): TypedContractMethod<
    [
      clubAId: BigNumberish,
      clubBId: BigNumberish,
      scheduledAt: BigNumberish,
      metadataCid: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [FFGame.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameClosed"
  ): TypedContractEvent<
    GameClosedEvent.InputTuple,
    GameClosedEvent.OutputTuple,
    GameClosedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;

  filters: {
    "GameClosed(uint256,address)": TypedContractEvent<
      GameClosedEvent.InputTuple,
      GameClosedEvent.OutputTuple,
      GameClosedEvent.OutputObject
    >;
    GameClosed: TypedContractEvent<
      GameClosedEvent.InputTuple,
      GameClosedEvent.OutputTuple,
      GameClosedEvent.OutputObject
    >;

    "GameCreated(uint256,uint256,uint256,uint64,string)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
  };
}
