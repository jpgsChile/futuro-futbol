/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FFLineupInterface extends Interface {
  getFunction(
    nameOrSignature: "addToLineup" | "getLineup" | "removeFromLineup" | "roles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LineupAdded" | "LineupRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToLineup",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLineup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromLineup",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addToLineup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLineup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromLineup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace LineupAddedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    clubId: BigNumberish,
    playerId: BigNumberish,
    executor: AddressLike
  ];
  export type OutputTuple = [
    gameId: bigint,
    clubId: bigint,
    playerId: bigint,
    executor: string
  ];
  export interface OutputObject {
    gameId: bigint;
    clubId: bigint;
    playerId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LineupRemovedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    clubId: BigNumberish,
    playerId: BigNumberish,
    executor: AddressLike
  ];
  export type OutputTuple = [
    gameId: bigint,
    clubId: bigint,
    playerId: bigint,
    executor: string
  ];
  export interface OutputObject {
    gameId: bigint;
    clubId: bigint;
    playerId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFLineup extends BaseContract {
  connect(runner?: ContractRunner | null): FFLineup;
  waitForDeployment(): Promise<this>;

  interface: FFLineupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToLineup: TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish, playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getLineup: TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish],
    [bigint[]],
    "view"
  >;

  removeFromLineup: TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish, playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToLineup"
  ): TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish, playerId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLineup"
  ): TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeFromLineup"
  ): TypedContractMethod<
    [gameId: BigNumberish, clubId: BigNumberish, playerId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LineupAdded"
  ): TypedContractEvent<
    LineupAddedEvent.InputTuple,
    LineupAddedEvent.OutputTuple,
    LineupAddedEvent.OutputObject
  >;
  getEvent(
    key: "LineupRemoved"
  ): TypedContractEvent<
    LineupRemovedEvent.InputTuple,
    LineupRemovedEvent.OutputTuple,
    LineupRemovedEvent.OutputObject
  >;

  filters: {
    "LineupAdded(uint256,uint256,uint256,address)": TypedContractEvent<
      LineupAddedEvent.InputTuple,
      LineupAddedEvent.OutputTuple,
      LineupAddedEvent.OutputObject
    >;
    LineupAdded: TypedContractEvent<
      LineupAddedEvent.InputTuple,
      LineupAddedEvent.OutputTuple,
      LineupAddedEvent.OutputObject
    >;

    "LineupRemoved(uint256,uint256,uint256,address)": TypedContractEvent<
      LineupRemovedEvent.InputTuple,
      LineupRemovedEvent.OutputTuple,
      LineupRemovedEvent.OutputObject
    >;
    LineupRemoved: TypedContractEvent<
      LineupRemovedEvent.InputTuple,
      LineupRemovedEvent.OutputTuple,
      LineupRemovedEvent.OutputObject
    >;
  };
}
