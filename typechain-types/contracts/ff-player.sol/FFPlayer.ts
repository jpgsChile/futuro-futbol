/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FFPlayer {
  export type PlayerStruct = {
    id: BigNumberish;
    account: AddressLike;
    nickname: string;
    primaryPosition: BigNumberish;
    level: BigNumberish;
    isMinor: boolean;
    guardian: AddressLike;
    visibility: BigNumberish;
    clubId: BigNumberish;
  };

  export type PlayerStructOutput = [
    id: bigint,
    account: string,
    nickname: string,
    primaryPosition: bigint,
    level: bigint,
    isMinor: boolean,
    guardian: string,
    visibility: bigint,
    clubId: bigint
  ] & {
    id: bigint;
    account: string;
    nickname: string;
    primaryPosition: bigint;
    level: bigint;
    isMinor: boolean;
    guardian: string;
    visibility: bigint;
    clubId: bigint;
  };
}

export interface FFPlayerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountToPlayerId"
      | "getPlayer"
      | "nextPlayerId"
      | "playerJoinClub"
      | "registerPlayerFF"
      | "roles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlayerJoinedClub" | "PlayerRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountToPlayerId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPlayerId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerJoinClub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayerFF",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountToPlayerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPlayerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerJoinClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayerFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace PlayerJoinedClubEvent {
  export type InputTuple = [
    playerId: BigNumberish,
    clubId: BigNumberish,
    executor: AddressLike
  ];
  export type OutputTuple = [
    playerId: bigint,
    clubId: bigint,
    executor: string
  ];
  export interface OutputObject {
    playerId: bigint;
    clubId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    id: BigNumberish,
    account: AddressLike,
    nickname: string,
    isMinor: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    account: string,
    nickname: string,
    isMinor: boolean
  ];
  export interface OutputObject {
    id: bigint;
    account: string;
    nickname: string;
    isMinor: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFPlayer extends BaseContract {
  connect(runner?: ContractRunner | null): FFPlayer;
  waitForDeployment(): Promise<this>;

  interface: FFPlayerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountToPlayerId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getPlayer: TypedContractMethod<
    [playerId: BigNumberish],
    [FFPlayer.PlayerStructOutput],
    "view"
  >;

  nextPlayerId: TypedContractMethod<[], [bigint], "view">;

  playerJoinClub: TypedContractMethod<
    [playerId: BigNumberish, clubId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerPlayerFF: TypedContractMethod<
    [
      nickname: string,
      primaryPosition: BigNumberish,
      level: BigNumberish,
      isMinor: boolean,
      guardian: AddressLike,
      visibility: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountToPlayerId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [playerId: BigNumberish],
    [FFPlayer.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextPlayerId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerJoinClub"
  ): TypedContractMethod<
    [playerId: BigNumberish, clubId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPlayerFF"
  ): TypedContractMethod<
    [
      nickname: string,
      primaryPosition: BigNumberish,
      level: BigNumberish,
      isMinor: boolean,
      guardian: AddressLike,
      visibility: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "PlayerJoinedClub"
  ): TypedContractEvent<
    PlayerJoinedClubEvent.InputTuple,
    PlayerJoinedClubEvent.OutputTuple,
    PlayerJoinedClubEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;

  filters: {
    "PlayerJoinedClub(uint256,uint256,address)": TypedContractEvent<
      PlayerJoinedClubEvent.InputTuple,
      PlayerJoinedClubEvent.OutputTuple,
      PlayerJoinedClubEvent.OutputObject
    >;
    PlayerJoinedClub: TypedContractEvent<
      PlayerJoinedClubEvent.InputTuple,
      PlayerJoinedClubEvent.OutputTuple,
      PlayerJoinedClubEvent.OutputObject
    >;

    "PlayerRegistered(uint256,address,string,bool)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
  };
}
