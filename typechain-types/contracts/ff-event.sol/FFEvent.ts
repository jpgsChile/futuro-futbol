/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FFEvent {
  export type GameEventStruct = {
    id: BigNumberish;
    gameId: BigNumberish;
    clubId: BigNumberish;
    playerId: BigNumberish;
    eventType: BigNumberish;
    dataCid: string;
    timestamp: BigNumberish;
  };

  export type GameEventStructOutput = [
    id: bigint,
    gameId: bigint,
    clubId: bigint,
    playerId: bigint,
    eventType: bigint,
    dataCid: string,
    timestamp: bigint
  ] & {
    id: bigint;
    gameId: bigint;
    clubId: bigint;
    playerId: bigint;
    eventType: bigint;
    dataCid: string;
    timestamp: bigint;
  };
}

export interface FFEventInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eventsById"
      | "gameToEventIds"
      | "getGameEvents"
      | "nextEventId"
      | "playerReputation"
      | "registerEvent"
      | "registerEventAndReputation"
      | "registerEventFF"
      | "roles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EventRegistered" | "ReputationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "eventsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameToEventIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEventId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerReputation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEvent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEventAndReputation",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEventFF",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;

  decodeFunctionResult(functionFragment: "eventsById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameToEventIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEventAndReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEventFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
}

export namespace EventRegisteredEvent {
  export type InputTuple = [
    id: BigNumberish,
    gameId: BigNumberish,
    playerId: BigNumberish,
    eventType: BigNumberish,
    dataCid: string
  ];
  export type OutputTuple = [
    id: bigint,
    gameId: bigint,
    playerId: bigint,
    eventType: bigint,
    dataCid: string
  ];
  export interface OutputObject {
    id: bigint;
    gameId: bigint;
    playerId: bigint;
    eventType: bigint;
    dataCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [playerId: BigNumberish, newScore: BigNumberish];
  export type OutputTuple = [playerId: bigint, newScore: bigint];
  export interface OutputObject {
    playerId: bigint;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FFEvent extends BaseContract {
  connect(runner?: ContractRunner | null): FFEvent;
  waitForDeployment(): Promise<this>;

  interface: FFEventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eventsById: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        id: bigint;
        gameId: bigint;
        clubId: bigint;
        playerId: bigint;
        eventType: bigint;
        dataCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  gameToEventIds: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getGameEvents: TypedContractMethod<
    [gameId: BigNumberish],
    [FFEvent.GameEventStructOutput[]],
    "view"
  >;

  nextEventId: TypedContractMethod<[], [bigint], "view">;

  playerReputation: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  registerEvent: TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  registerEventAndReputation: TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish,
      reputationDelta: BigNumberish,
      dataCid: string
    ],
    [bigint],
    "nonpayable"
  >;

  registerEventFF: TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish,
      dataCid: string
    ],
    [bigint],
    "nonpayable"
  >;

  roles: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eventsById"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        id: bigint;
        gameId: bigint;
        clubId: bigint;
        playerId: bigint;
        eventType: bigint;
        dataCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameToEventIds"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameEvents"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [FFEvent.GameEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextEventId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerReputation"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerEvent"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerEventAndReputation"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish,
      reputationDelta: BigNumberish,
      dataCid: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerEventFF"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      clubId: BigNumberish,
      playerId: BigNumberish,
      eventType: BigNumberish,
      dataCid: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EventRegistered"
  ): TypedContractEvent<
    EventRegisteredEvent.InputTuple,
    EventRegisteredEvent.OutputTuple,
    EventRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;

  filters: {
    "EventRegistered(uint256,uint256,uint256,uint8,string)": TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;
    EventRegistered: TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;

    "ReputationUpdated(uint256,int256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
  };
}
